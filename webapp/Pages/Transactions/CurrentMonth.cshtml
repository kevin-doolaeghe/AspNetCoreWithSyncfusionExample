@page "{handler?}"
@model webapp.Pages.Transactions.CurrentMonthModel
@using System.Globalization;
@using Syncfusion.EJ2.Calendars;
@using Syncfusion.EJ2.DropDowns;
@using Syncfusion.EJ2.Inputs;
@{
    ViewData["PageTitle"] = Localizer["Current month"];

    var palettes = new string[] { "#509ED9", "#80D950", "#D45D48", "#FEC200", "#D97F3F", "#64B9C4", "#5848C2", "#C248BA", "#2C3BC7", "#C24883", "#0E9622", "#914C5E", "#12C96E", "#70AD47", "#5B9BD5", "#C1C1C1", "#6F6FE2", "#E269AE", "#9E480E", "#997300" };
    var cellSpacing = new double[] { 10, 10 };

    var toolbarItems = new string[] {
        "Add", "Edit", "Delete", "Print", "ExcelExport", "PdfExport", "Search"
    };
    var commands = new List<object>() {
        new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" }},
        new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" }},
    };
    var sortSettings = new List<object>() { new { field = "Date", direction = "Ascending" } };
    var filterSettings = new {
        stringOperator = new List<object>() {
            new { value = "contains", text = Localizer["Contains"].Value },
            new { value = "startsWith", text = Localizer["Starts with"].Value },
            new { value = "endsWith", text = Localizer["Ends with"].Value },
            new { value = "equal", text = Localizer["Equal"].Value },
            new { value = "isempty", text = Localizer["Empty"].Value },
            new { value = "doesnotcontain", text = Localizer["Does not contain"].Value },
            new { value = "doesnotstartwith", text = Localizer["Does not start with"].Value },
            new { value = "doesnotendwith", text = Localizer["Does not end with"].Value },
            new { value = "notequal", text = Localizer["Not equal"].Value },
            new { value = "isnotempty", text = Localizer["Not empty"].Value },
            new { value = "wildcard", text = Localizer["Like"].Value },
        },
        numberOperator = new List<object>() {
            new { value = "equal", text = Localizer["Equal"].Value },
            new { value = "notequal", text = Localizer["Not equal"].Value },
            new { value = "greaterthan", text = Localizer["Greater than"].Value },
            new { value = "greaterthanorequal", text = Localizer["Greater than or equal"].Value },
            new { value = "lessthan", text = Localizer["Less than"].Value },
            new { value = "lessthanorequal", text = Localizer["Less than or equal"].Value }
        },
        dateOperator = new List<object>() {
            new { value = "equal", text = Localizer["Equal"].Value },
            new { value = "notequal", text = Localizer["Not equal"].Value },
            new { value = "greaterthan", text = Localizer["Greater than"].Value },
            new { value = "greaterthanorequal", text = Localizer["Greater than or equal"].Value },
            new { value = "lessthan", text = Localizer["Less than"].Value },
            new { value = "lessthanorequal", text = Localizer["Less than or equal"].Value },
        },
        booleanOperator = new List<object>() {
            new { value = "equals", text = Localizer["Equal"].Value },
            new { value = "notequal", text = Localizer["Not equal"].Value },
        },
    };
    var searchSettings = new string[] { "Note", "Category", "Status" };
    var validationRules = new { required = true };

    var dateParams = new DatePicker() {
        Format = Localizer["Date format"].Value,
    };
    var statusParams = new DropDownList() {
        DataSource = new object[] {
            new { Value = false, Text = Localizer["Pending"].Value },
            new { Value = true, Text = Localizer["Closed"].Value },
        },
        Query = "new ej.data.Query()",
        Fields = new DropDownListFieldSettings() { Value = "Value", Text = "Text" },
    };
    var categoryParams = new DropDownList() {
        DataSource = Model.Categories.Select(x => new { Value = x.CategoryId, Text = x.Description }),
        Query = "new ej.data.Query()",
        Fields = new DropDownListFieldSettings() { Value = "Value", Text = "Text" },
        AllowFiltering = true,
        FilterType = FilterType.Contains,
    };
    var amountParams = new NumericTextBox() {
        Format = "C2",
        Step = 10,
    };
}
@Html.AntiForgeryToken()

<div class="text-center">

    <ejs-breadcrumb id="breadcrumb" cssClass="p-4" enableNavigation="true" maxItems="3" overflowMode="Menu">
        <e-breadcrumb-items>
            <e-breadcrumb-item iconCss="e-icons e-home" url="/"></e-breadcrumb-item>
            <e-breadcrumb-item text="@Localizer["Transactions"].Value" url="/Transactions"></e-breadcrumb-item>
            <e-breadcrumb-item text="@Localizer["Current month"].Value" url="/Transactions/CurrentMonth"></e-breadcrumb-item>
        </e-breadcrumb-items>
    </ejs-breadcrumb>

    <ejs-dashboardlayout id="gridLayout" mediaQuery="max-width: 992px" columns="3" cellSpacing="cellSpacing" cellAspectRatio="2.5" allowDragging="false" allowResizing="false">
        
        <e-dashboardlayout-panels>
            <e-dashboardlayout-panel sizeX="1" sizeY="1" row="0" col="0">
                <e-content-template>
                    <div>

                        <div class="e-panel-container current-balance">
                            <div class="e-panel-header">
                                <div class="title">
                                    @Localizer["Current balance"]
                                </div>
                            </div>
                            <div class="e-panel-content">
                                <h1 id="currentBalance">
                                    @if (Model.CurrentBalance > 100) {
                                        <i class="fa-solid fa-sm fa-square-check text-success"></i>
                                    } else {
                                        <i class="fa-solid fa-sm fa-circle-exclamation text-danger"></i>
                                    }
                                    @Model.CurrentBalance.ToString("C2", CultureInfo.CurrentCulture)
                                </h1>
                            </div>
                        </div>

                    </div>
                </e-content-template>
            </e-dashboardlayout-panel>

            <e-dashboardlayout-panel sizeX="1" sizeY="1" row="0" col="1">
                <e-content-template>
                    <div>

                        <div class="e-panel-container real-balance">
                            <div class="e-panel-header">
                                <div class="title">
                                    @Localizer["Real balance"]
                                </div>
                            </div>
                            <div class="e-panel-content">
                                <h1 id="realBalance">
                                    @if (Model.RealBalance > 100) {
                                        <i class="fa-solid fa-sm fa-square-check text-success"></i>
                                    } else {
                                        <i class="fa-solid fa-sm fa-circle-exclamation text-danger"></i>
                                    }
                                    @Model.RealBalance.ToString("C2", CultureInfo.CurrentCulture)
                                </h1>
                            </div>
                        </div>

                    </div>
                </e-content-template>
            </e-dashboardlayout-panel>

            <e-dashboardlayout-panel sizeX="1" sizeY="1" row="0" col="2">
                <e-content-template>
                    <div>

                        <div class="e-panel-container cashflow">
                            <div class="e-panel-header">
                                <div class="title">
                                    @Localizer["Cashflow"]
                                </div>
                            </div>
                            <div class="e-panel-content">
                                <h1 id="cashflow">
                                    @if (Model.Cashflow < 500) {
                                        <i class="fa-solid fa-sm fa-square-check text-success"></i>
                                    } else {
                                        <i class="fa-solid fa-sm fa-circle-exclamation text-danger"></i>
                                    }
                                    @Model.Cashflow.ToString("C2", CultureInfo.CurrentCulture)
                                </h1>
                            </div>
                        </div>

                    </div>
                </e-content-template>
            </e-dashboardlayout-panel>

            <e-dashboardlayout-panel sizeX="3" sizeY="4" row="1" col="0">
                <e-content-template>
                    <div>

                        <div class="e-panel-container">
                            <div class="e-panel-header">
                                <div class="title">
                                    <i class="fa-solid fa-calendar"></i> @DateTime.Today.ToString("MMMM yyyy")
                                </div>
                            </div>
                            <div class="e-panel-content">
                                <ejs-grid id="grid" load="onLoad" dataBound="dataBound" actionComplete="actionComplete" allowPaging="true" allowSorting="true" allowFiltering="true" enableStickyHeader="true" allowPdfExport="true" allowExcelExport="true" pdfExportComplete="pdfExportComplete" excelExportComplete="excelExportComplete" toolbarClick="toolbarClick" toolbar="toolbarItems" width="100%" height="100%">
                                    <e-data-manager url="/Transactions/CurrentMonth/DataSource" crudUrl="/Transactions/CurrentMonth/CrudUpdate" adaptor="UrlAdaptor"></e-data-manager>
                                    <e-grid-editsettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog" showConfirmDialog="true" showDeleteConfirmDialog="true"></e-grid-editsettings>
                                    <e-grid-pagesettings pageSize="20"></e-grid-pagesettings>
                                    <e-grid-sortsettings columns="sortSettings"></e-grid-sortsettings>
                                    <e-grid-filtersettings operators="filterSettings" enableCaseSensitivity="false" ignoreAccent="false" type="Menu"></e-grid-filtersettings>
                                    <e-grid-searchsettings fields="searchSettings" operator="contains" ignoreCase="true"></e-grid-searchsettings>
                                    <e-grid-loadingindicator indicatorType="Shimmer"></e-grid-loadingindicator>
                                    <e-grid-columns>
                                        <e-grid-column field="TransactionId" headerText="@Localizer["Id"].Value" isPrimaryKey="true" visible="false"></e-grid-column>
                                        <e-grid-column field="Date" headerText="@Localizer["Date"].Value" editType="datepickeredit" edit="new { @params = dateParams }" validationRules="validationRules" format="@Localizer["Date format"].Value" defaultValue="@DateTime.Today" width="120"></e-grid-column>
                                        <e-grid-column field="IsDone" headerText="@Localizer["Status"].Value" editType="dropdownedit" edit="new { @params = statusParams }" filter="new { @params = statusParams }" validationRules="validationRules" template="#statusTemplate" defaultValue="false" width="100"></e-grid-column>
                                        <e-grid-column field="Note" headerText="@Localizer["Note"].Value" editType="textboxedit" validationRules="validationRules" minWidth="200" width="300"></e-grid-column>
                                        <e-grid-column field="CategoryId" headerText="@Localizer["Category"].Value" editType="dropdownedit" edit="new { @params = categoryParams }" filter="new { @params = categoryParams }" foreignKeyValue="Description" dataSource="Model.Categories" validationRules="validationRules" width="140"></e-grid-column>
                                        <e-grid-column field="Amount" headerText="@Localizer["Amount"].Value" editType="numericedit" edit="new { @params = amountParams }" validationRules="validationRules" format="C2" template="#amountTemplate" width="120"></e-grid-column>
                                        <e-grid-column headerText="@Localizer["Commands"].Value" commands="commands" textAlign="Right" width="120"></e-grid-column>
                                    </e-grid-columns>
                                </ejs-grid>
                            </div>
                        </div>

                    </div>
                </e-content-template>
            </e-dashboardlayout-panel>
        </e-dashboardlayout-panels>

    </ejs-dashboardlayout>
</div>

<script id="statusTemplate" type="text/x-template">
    ${if(IsDone)}
        <span class="badge bg-success p-2">@Localizer["Closed"].Value</span>
    ${else}
        <span class="badge bg-danger p-2">@Localizer["Pending"].Value</span>
    ${/if}
</script>

<script id="amountTemplate" type="text/x-template">
    ${if(Amount > 0)}
        <span class="badge bg-success p-2">${FormattedAmount}</span>
    ${else}
        <span class="badge bg-danger p-2">${FormattedAmount}</span>
    ${/if}
</script>

<script>
    function onLoad() {
        this.dataSource.dataSource.headers = [{ "XSRF-TOKEN": $("input:hidden[name='__RequestVerificationToken']").val() }];
    }

    function dataBound(args) {
        this.hideScroll();
    }

    function actionComplete(args) {
        console.log(args);

        if ((args.requestType === "beginEdit" || args.requestType === "add")) {
            var dialog = args.dialog;
            dialog.element.style.maxHeight = "1000px";
            dialog.header = args.requestType === "beginEdit" ? "@Localizer["Edit transaction"].Value" + args.rowData["Note"] : "@Localizer["Add transaction"].Value";
        }

        updateBalance();
    }

    function toolbarClick(args) {
        var gridObj = document.getElementById("grid").ej2_instances[0];
        if (args.item.id === "grid_pdfexport") {
            gridObj.showSpinner();
            gridObj.pdfExport();
        }
        if (args.item.id === "grid_excelexport") {
            gridObj.showSpinner();
            gridObj.excelExport();
        }
    }

    function pdfExportComplete(args) {
        this.hideSpinner();
    }

    function excelExportComplete(args) {
        this.hideSpinner();
    }

    function updateBalance() {
        let currentBalanceElement = document.getElementById("currentBalance");
        let realBalanceElement = document.getElementById("realBalance");
        let cashflowElement = document.getElementById("cashflow");

        fetch("/Balance").then(function (result) { return result.json() }).then(function (data) {
            let positive = '<i class="fa-solid fa-sm fa-square-check text-success"></i> ';
            let negative = '<i class="fa-solid fa-sm fa-circle-exclamation text-danger"></i> ';

            currentBalanceElement.innerHTML = (data.currentBalance > 100 ? positive : negative)
                + data.formattedCurrentBalance;
            realBalanceElement.innerHTML = (data.realBalance > 100 ? positive : negative)
                + data.formattedRealBalance;
            cashflowElement.innerHTML = (data.cashflow > 100 ? positive : negative)
                + data.formattedCashflow;
        });
    }
</script>
